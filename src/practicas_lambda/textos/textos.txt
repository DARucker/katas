https://www.oracle.com/lad/technical-resources/articles/java/expresiones-lambda-api-stream-java.html

Es un metodo anonimo que no requiere de un identificador para ser invocado

ECODE 
Como hemos visto las expresiones lambda son funciones anÛnimas y pueden 
ser utilizadas all· donde el tipo aceptado sea una interfaz funcional 
peroÖ øquÈ es una interfaz funcional?

El motivo de que la interfaz tenga un ˙nico mÈtodo abstracto es que ser· 
la expresiÛn lambda la que proveer· de la implementaciÛn para dicho mÈtodo.


(parametros)  operador -> expresion o funcion
Mitocode "todo aquello que pueda ser implementado a travÈs de una clase anÛnima puede
ser representado por una lambda"	 

Expresiones Lambda
Por medio de expresiones lambda podemos referenciar m√©todos an√≥nimos o m√©todos sin nombre,
 lo que nos permite escribir c√≥digo m√°s claro y conciso que  cuando usamos clases an√≥nimas. Una expresi√≥n lambda se compone de:

   Listado de par√°metros separados por comas y encerrados en par√©ntesis, por ejemplo: (a,b).
   El s√≠mbolo de flecha hacia la derecha: ->
   Un cuerpo que puede ser un bloque de c√≥digo encerrado entre llaves o una sola expresi√≥n.
A continuaci√≥n algunos ejemplos de expresiones lambda:



Interfaces funcionales
Concepto nuevo en Java SE 8 y que es la base para que podamos escribir expresiones lambda. Una interface
 funcional se define como una interface que tiene uno y solo un m√©todo abstracto y que √©ste sea 
 diferente a los m√©todos definidos en java.lang.Object (a saber: equals, hashcode, clone, etc.). 
 La interface puede tener m√©todos por defecto y est√°ticos sin que esto afecte su condici√≥n
  de ser interface funcional.
  
 Java SE 8 define cuatro (4) grandes grupos de interfaces funcionales agrupadas en el paquete 
 java.util.function. A continuaci√≥n veremos las principales de cada grupo:

java.util.function.Predicate<T>: Define  el  m√©todo  +test(T):boolean  y  es  usada 
    para validaci√≥n de criterios.
  
java.util.function.Supplier<T>: Define el m√©todo +get():T y es usada para la creaci√≥n de objetos.
 
java.util.function.Consumer<T>: Define el m√©todo +accept(T):void y es usada para consumir
    m√©todos del par√°metro T, causando posibles efectos secundarios.
 
java.util.function.Function<T, R>: Define el m√©todo +apply(T):R y es usada para convertir 
   de un valor T a otro valor R.
   

De forma general, a continuaci√≥n se listan los pasos que usa el compilador para inferir el tipo de una expresi√≥n lambda:

Identificaci√≥n de contexto: asignaci√≥n o invocaci√≥n de m√©todo.
 
   Identificar el tipo destino: variable o par√°metro.
 
   Identificar la interface funcional del tipo destino.
 
   Identificar el descriptor de la funci√≥n (firma del m√©todo abstracto).
 
  Verificar que el descriptor de la funci√≥n sea coherente con la expresi√≥n lambda.
    
    
  M√©todos de Referencia
Cuando la expresi√≥n lambda se compone de una sola sentencia e invoca alg√∫n m√©todo
 existente por medio de su nombre, existe la posibilidad de escribirla usando m√©todos 
 de referencia, con lo cual se logra un c√≥digo m√°s compacto y f√°cil de leer. 
 Existen tres (3) tipos de m√©todos de referencia y uno adicional (1) para constructores:  
 
 ConclusiÛn
En esta primera parte analizamos lo beneficioso que puede ser para nuestro cÛdigo el 
poder pasar comportamiento como valores/par·metros y revisamos los cambios en el 
lenguaje que permiten el uso de expresiones lambda:

+ Funciones como entidades de primer nivel: Las funciones ahora tienen un rol 
	protagÛnico cuando de expresiones lambda se trata.
+ MÈtodos por defecto/est·ticos en interfaces: EvoluciÛn de librerÌas sin perder 
	compatibilidad gracias a que ahora podemos definir e implementar mÈtodos en las interfaces.
+ Interfaces funcionales: Concepto clave para poder escribir expresiones lambda. Interfaces 
	con solo un mÈtodo abstracto.
+ Inferencia de tipos: Revisamos los pasos que realiza el compilador para inferir los 
	tipos de las expresiones lambda en contextos de asignaciÛn y de invocaciÛn de mÈtodos (par·metros).
+ Alcance de las expresiones lambda: Aprendimos el significado de Efectivamente Constante 
	y revisamos la diferencia entre clases anÛnimas y expresiones lambda en cuanto a la palabra 
	reservada this se refiere.
+ MÈtodos de referencia: En el ˙ltimo tema vimos otra forma de escribir expresiones lambda 
	de una sola sentencia, con lo cual se logra un cÛdigo m·s compacto y f·cil de leer.
 
 
 
 API Stream Stream se define como una secuencia de elementos que provienen de una fuente que 
 soporta operaciones para el procesamiento de sus datos:

 + De forma declarativa usando expresiones lambda.
 + Permitiendo el posible encadenamiento de varias operaciones, con lo que se logra tener 
 	un cÛdigo f·cil de leer y con un objetivo claro.
 + De forma secuencial o paralela (Fork/Join).
 
 
 La API nos permite realizar operaciones sobre colecciones de datos usando el modelo 
 filtro/mapeo/reducciÛn, en el cual se seleccionan los datos que se van a procesar (filtro), 
 se convierten a otro tipo de dato (mapeo) y al final se obtiene el resultado deseado (reducciÛn).
 